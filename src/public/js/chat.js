"use strict";

const socket = io({ // Inicializamos socket del lado del cliente
    autoConnect: false
}); 

let user;

Swal.fire({ // Muestra una alerta que te pide tu nombre
    title: "Identif√≠cate",
    input: "text",
    text: "Por favor ingresa tu nombre de usuario",
    inputValidator: (value) => { // Valida que en el imput no coloquemos un string num√©rico o vac√≠o
        if (!isNaN(value)) { 
            return "¬°Utiliza un nombre de usaurio v√°lido!"
        }
    },
    allowOutsideClick: false,
    allowEscapeKey: false,
}).then(result => {
    user = result.value
    socket.connect() // Le pedimos que se conecte cuando el usuario ingres√≥ un nombre v√°lido
    socket.emit("autenticado", user)
})

const form = document.getElementById("form-chat")

document.getElementById("inputFile").addEventListener("click", (e) => { //! Eliminar si se desea enviar im√°genes
    e.preventDefault()
    Toastify({
        text: "Se pueden enviar im√°genes en este chat, pero lamentablemente tuve que desactivar esta opci√≥n ya que en el sitio gratuito donde est√° subido el proyecto no me es posible hacerlo. Haz click aqu√≠ si deseas tener activada la opci√≥n siguiendo los pasos a seguir que anot√© para que puedas crear tu propio chat",
        duration: 10000,
        destination: "https://github.com/Ale6100/Chat-js.git#sala-de-chat",
        newWindow: true,
        close: false,
        gravity: "top",
        position: "right",
        stopOnFocus: true,
        style: {
            background: "linear-gradient(to right, #00b09b, rgb(125, 125, 61))",
            border: "2px solid black",
            borderRadius: "2px"
        }
    }).showToast();
})

form.addEventListener("submit", async e => {
    e.preventDefault()

    const formData = new FormData(form)
    const obj = Object.fromEntries(formData); // Convertimos el FormData a un objeto

    const mensaje = obj.mensaje.trim() // Quita los espacios sobrantes al principio y al final del mensaje
    const tamanioImagen = obj.image.size

    if (mensaje.length > 0 || tamanioImagen > 0) { // Se ejecuta si el mensaje es un string no vac√≠o o si se quiere enviar una imagen
        const res = await fetch("/api/guardarImagen", { // Enviamos a esta ruta el formData. Se encargar√° de guardar una imagen si el usuario as√≠ lo quiso
            method: "POST",
            body: formData // Enviamos los datos al body. Multer se va a encargar de procesarlos
        }).then(res => res.json())

        const urlImagen = res.imageSent ? res.payload : undefined // Si el usuario envi√≥ una imagen, se env√≠a junto con los dem√°s datos
        
        const fecha = new Date().toLocaleDateString() // Fecha y hora en la que se mand√≥ el mensaje
        const hora = new Date().toLocaleTimeString()
        socket.emit("message", { user, message: mensaje, fecha, hora, urlImagen: urlImagen }) // Emito un evento personalizado "message". Env√≠o el usuario, el mensaje, la fecha, la hora y la url de la imagen en caso de que haya enviado
    }

    form.reset()
})

const logsPanel = document.getElementById("logsPanel")

socket.on("logs", data => { // Muestro los mensajes pasados, cada vez que se env√≠a un nuevo mensaje y cada vez que se elimina uno
    logsPanel.innerHTML = ""
    let mensajesConsecutivosAcumulados = ""

    data.forEach((element, index) => { // Mapeo los mensajes. Considerar que es un forEach raro debido a que se requiere ordenar de una manera especial los mensajes
        // Estructura de cada mensaje
        const mensaje = `
        <div class="mensajeIndividual">
            <div class="divMensajeImagen">
                ${element.message ? `<p class="pMensaje">${element.message}</p>` : ""}
                ${element.urlImagen ? `<img src="${element.urlImagen}" alt="Imagen enviada">` : ""}
            </div>
            <div>
                <p class="pHora">${element.hora}</p>
                <button id="btn-delete-${index}" class="pBasura">üóëÔ∏è</button>
            </div>
        </div>
        `

        if (data.length === 1) { // Si s√≥lo hay un mensaje para mostrar
            logsPanel.innerHTML += `
            <p class="fecha">----- ${element.fecha} -----</p>
            <div class="contenedor-cuerpoMensaje">
                <div class="cuerpoMensaje">
                    <p> <span class="userSpan">${element.user}</span></p>
                    ${mensaje}
                </div>
            </div>
            `
        } else {
            const fechaActual = new Date(element.fecha.split('/').reverse().join('-')).getTime()
            const fechaAnterior = new Date(data[index-1]?.fecha.split('/').reverse().join('-')).getTime() // Uso el signo de pregunta ya que en la primera iteraci√≥n, data[index-1] no est√° definido, pero no importa ya que en ese momento no lo necesitamos

            if (index === 0) { // Entra en este if si estamos en la primera iteraci√≥n (correspondiente al primer mensaje)
                logsPanel.innerHTML = `<p class="fecha">----- ${element.fecha} -----</p>` // Al inicio siempre se mostrar√° la primera fecha
                mensajesConsecutivosAcumulados = `${mensaje}` // Guardamos el primer mensaje y hora

            } else if (index !== data.length-1) { // Entra en este if si no estamos ni en la primera iteraci√≥n (mensaje) ni en la √∫ltima
                if (data[index].user !== data[index-1].user) { // Cuando el mensaje actual y el anterior son de distinto usuario
                    // En un contenedor grande se visualizan todos los mensajes previos guardados, correspondiente al usuario anterior
                    logsPanel.innerHTML += `
                    <div class="contenedor-cuerpoMensaje">
                        <div class="cuerpoMensaje">
                            <p> <span class="userSpan">${data[index-1].user}</span></p>
                            ${mensajesConsecutivosAcumulados}
                        </div>
                    </div>
                    `

                    if (fechaActual !== fechaAnterior) { // Si adem√°s hubo un cambio de fecha, muestra la actual, correspondiente a la fecha del mensaje enviado por el nuevo usuario
                        logsPanel.innerHTML += `<p class="fecha">----- ${element.fecha} -----</p>`
                    }

                    mensajesConsecutivosAcumulados = `${mensaje}` // Se guarda √∫nicamente el mensaje actual, correspondiente al nuevo usuario

                } else { // Cuando el mensaje actual y el anterior son del mismo usuario
                    if (fechaActual !== fechaAnterior) { // Si hubo un cambio de fecha, ponemos el globo con los mensajes viejos acumulados y la fecha actual
                        logsPanel.innerHTML += `
                        <div class="contenedor-cuerpoMensaje">
                            <div class="cuerpoMensaje">
                                <p> <span class="userSpan">${data[index-1].user}</span></p>
                                ${mensajesConsecutivosAcumulados}
                            </div>
                        </div>
                        <p class="fecha">----- ${element.fecha} -----</p>
                        `
                        mensajesConsecutivosAcumulados = ""
                    }
                    mensajesConsecutivosAcumulados += `${mensaje}` // Se guarda el mensaje actual a la lista
                }
            } else if (index === data.length-1) { // En la √∫ltima iteraci√≥n
                const fechaActual = new Date(element.fecha.split('/').reverse().join('-')).getTime()
                const fechaAnterior = new Date(data[index-1].fecha.split('/').reverse().join('-')).getTime()

                if (data[index].user !== data[index-1].user) { // Cuando los √∫ltimos dos mensajes son de distinto usuario
                    // En un contenedor grande se visualizan todos los mensajes previos guardados, correspondiente al usuario anterior
                    logsPanel.innerHTML += `
                    <div class="contenedor-cuerpoMensaje">
                        <div class="cuerpoMensaje">
                            <p> <span class="userSpan">${data[index-1].user}</span></p>
                            ${mensajesConsecutivosAcumulados}
                        </div>
                    </div>
                    `

                    if (fechaActual !== fechaAnterior) { // Si adem√°s hubo un cambio de fecha, muestra la actual, correspondiente a la fecha del mensaje enviado por el nuevo usuario
                        logsPanel.innerHTML += `<p class="fecha">----- ${element.fecha} -----</p>`
                    }

                    // Se visualiza el √∫ltimo mensaje enviado, correspondiente al nuevo usuario
                    logsPanel.innerHTML += `
                    <div class="contenedor-cuerpoMensaje">
                        <div class="cuerpoMensaje">
                            <p> <span class="userSpan">${element.user}</span></p>
                            ${mensaje}
                        </div>
                    </div>
                    `
                } else { // Cuando los √∫ltimos dos mensajes son del mismo usuario
                    if (fechaActual !== fechaAnterior) { // Si hubo un cambio de fecha
                        logsPanel.innerHTML += `
                        <div class="contenedor-cuerpoMensaje">
                            <div class="cuerpoMensaje">
                                <p> <span class="userSpan">${element.user}</span></p>
                                ${mensajesConsecutivosAcumulados}
                            </div>
                        </div>
                        <p class="fecha">----- ${element.fecha} -----</p>
                        `
                        mensajesConsecutivosAcumulados = ""
                    }

                    mensajesConsecutivosAcumulados += `${mensaje}` // Guardo el √∫ltimo mensaje

                    // Se visualiza el √∫ltimo grupo de mensajes correspondiente al √∫ltimo usuario en enviar mensaje
                    logsPanel.innerHTML += `
                    <div class="contenedor-cuerpoMensaje">
                        <div class="cuerpoMensaje">
                            <p> <span class="userSpan">${element.user}</span></p>
                            ${mensajesConsecutivosAcumulados}
                        </div>
                    </div>
                    `
                }
            }
        }

        document.querySelectorAll(".contenedor-cuerpoMensaje").forEach(etiqueta => { // Hago esto para que los mensajes enviados por el usuario actual se vean a la derecha, y el resto a la izquierda
            if (etiqueta.children[0].children[0].innerText === user) {
                etiqueta.classList.add("flex-end")                
            }
        })
        logsPanel.scrollTop = logsPanel.scrollHeight // Hago que la barra siempre vaya abajo de todo cuando enviamos un mensaje
    })

    for (let index=0; index<data.length; index++) {
        const element = data[index];

        document.getElementById(`btn-delete-${index}`).addEventListener("click", () => {
            if (user.toLowerCase() === "ale" || user.toLowerCase() === "alejandro") { // Yo siempre uso estos nombres, pero si alguien m√°s lo hace no hay problema porque igual tiene que poner contrase√±a
                Swal.fire({ // Muestra una alerta pidi√©ndote contrase√±a | Lo m√°s normal ser√≠a que en realidad cada usuario pueda eliminar su propio mensaje, pero como no tengo un sistema de logueo se me ocurri√≥ hacerlo por contrase√±a. Lamentablemente esta contrase√±a s√≥lo la tengo que saber yo para que nadie elimine maliciosamente
                    title: "Eliminar mensaje",
                    input: "password",
                    text: "Debes ingresar una contrase√±a especial para eliminar mensajes",
                    allowOutsideClick: false,
                    allowEscapeKey: false,
                }).then( async result => {
                    const res = await fetch("/api/eliminarMensaje", {
                        method: "DELETE",
                        body: JSON.stringify({ id: element._id, token: result.value }),
                        headers: {
                            "Content-Type": "application/json"
                        }
                    }).then(res => res.json())

                    if (res.status === "error") {
                        Swal.fire({
                            toast: true,
                            position: "top-end",
                            showConfirmButton: false,
                            timer: 4000,
                            title: `${res.message}`,
                            icon: "error"
                        })
                    } else {
                        Swal.fire({
                            toast: true,
                            position: "top-end",
                            showConfirmButton: false,
                            timer: 4000,
                            title: `${res.message}`,
                            icon: "success"
                        })
                        socket.emit("actualizar", { data: res.data }) 
                    }
                })
            } else {
                Swal.fire({
                    toast: true,
                    position: "top-end",
                    showConfirmButton: false,
                    timer: 4000,
                    title: "Por el momento s√≥lo el administrador puede eliminar mensajes",
                    icon: "info"
                })
            }
        })
    }
})

socket.on("newUserConnected", data => { // Muestra una peque√±a alerta cuando un usuario nuevo se conecta
    Swal.fire({
        toast: true,
        position: "top-end",
        showConfirmButton: false,
        timer: 4000,
        title: `${data} se ha unido al chat`,
        icon: "success"
    })
})
